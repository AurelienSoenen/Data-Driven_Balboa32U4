clear; close all; clc;
%% 1/ Consider the following linear model describing a chemical reactor and obtained with unitary sample time.
% Dimension of A : n x n
A_c = [0 0 1 0; 
       0 0 0 1; 
       0 -69.4 0 0; 
       0  150 0 0];

% Dimension of B : n x m
B_c = [0; 0; 273; -130];

% Parameters
n = size(A_c,2);          
m = size(B_c,2);

Ts = 0.01; % Example: 10ms sampling time -> 100H
% Discretize the system
sys_c = ss(A_c,B_c,[1 0 0 0],0);
sys_d = c2d(sys_c, Ts);
A = sys_d.A;
B = sys_d.B;

% Assigment of the set 
% Define the settling time (in seconds)
t_s = 1;
itae_4var = (1 / t_s) * [-4.236 + 12.617i, -4.236 - 12.617i, -6.254 + 4.139i, -6.254 - 4.139i];
bessel_4var = (1 / t_s) * [-4.016 + 5.072i, -4.016 - 5.072i, -5.528 + 1.655i, -5.528 - 1.655i];
p_4var_itae = exp(itae_4var * Ts);
p_4var_bessel = exp(bessel_4var * Ts);

% Model-Based Pole-placement methods
% The place.m function requires the Control System Toolbox.
K_itae_theory = place(A, B, p_4var_itae);
K_bessel_theory = place(A, B, p_4var_bessel);
 
% Arrays to store eigenvalue differences
eig_diff1_values = [];
eig_diff2_values = [];

rng(30);
T = 100;
% Historical data (u,x) is generated by simulating the open loop system
x = zeros(n, T); % Dimension of x : n x T
u = zeros(m, T); % Gaussian noise and Dimension of u : m x T
% Simulate the system for T time steps
for t = 1:T-1
    u(:,t) = - K_itae_theory * x(:,t);
    rdm_state_measurement = [randn(m,1)/1000; randn(m,1)/1000; randn(m,1)/1000; randn(m,1)/1000];
    x(:,t+1) = A * x(:,t) + B * u(:,t) + rdm_state_measurement; % Give same gain with Bessel or ITAE
end
poledifs = (0:20);
% Loop over T values from 1 to 256 (doubling each iteration)
for poledif = poledifs
    % Feedback gain after perturbation
    U_0 = u(:,1:T-1); % Dimension of U_0 : m x T-1
    X_0 = x(:,1:T-1); % Dimension of X_0 : n x T-1
    X_1 = x(:,2:T); % Dimension of X_1 : n x T-1

    M_rdm = ones(T-1,n);

    rdmPoles = p_4var_bessel-[0.01 0.01 0.01 0.01]*poledif;
    %rdmPoles = [1 -1 1j -1j]-[0.01 -0.01 0.01 -0.01]*poledif;

    for i = 1:n
        M_rdm(:,i) = fsolve(@(m_i) (X_1 - rdmPoles(i)*X_0)*m_i, M_rdm(:,i));
    end

    K_directDD = - U_0 * M_rdm * pinv(X_0 * M_rdm);
    eig1 = eig(A - B * K_directDD);
    eig_diff1 = norm(eig1 - p_4var_itae);
    eig_diff1 = mean(abs(abs(K_directDD - K_itae_theory)./abs(K_itae_theory)));
    eig_diff1_values = [eig_diff1_values, eig_diff1];

    % Linear Regression for A and B

    BA = X_1 * pinv([X_0; U_0]);
    A_OL = BA(:, 1:4); % This assumes A is in the second column of the combined matrix
    B_OL = BA(:, 5); % This assumes B is in the first column of the combined matrix
    
    K_indirectDD = place(A_OL, B_OL, rdmPoles);
    eig2 = eig(A - B * K_indirectDD);
    eig_diff2 = norm(eig2 - p_4var_itae);
    eig_diff2 = mean(abs(abs(K_indirectDD - K_itae_theory)./-K_itae_theory));
    eig_diff2_values = [eig_diff2_values, eig_diff2];

    
end

% Plot the eigenvalue differences
% Plot the eigenvalue differences
figure;

x0=200;
y0=200;
width=500;
height=400;
set(gcf,'position',[x0,y0,width,height])

% Plotting the eigenvalue differences
plot(poledifs*0.01, eig_diff1_values, 'k-o', 'LineWidth', 1.25, 'MarkerFaceColor', 'k');
hold on;
plot(poledifs*0.01, eig_diff2_values, 'k--o', 'LineWidth', 1.25, 'MarkerFaceColor', 'w');

% Adding labels
xlabel('Shift value: s');
ylabel('MRE [-]');

% Adding title and grid
%title('Eigenvalue Differences vs T');
grid on;

% Adding legend
legend('K\_direct', 'K\_indirect', 'Location', 'best');

% Setting the axis limits if needed
%xlim([1 256]);
%ylim([0, max([eig_diff1_values, eig_diff2_values])]);

% Add additional plot customizations as needed to match the uploaded image
set(gca, 'FontSize', 12); % Adjust font size as per the image

hold off; % Release the plot hold

% Check if the folder 'plot' exists, if not, create it
folderName = 'plot';
if ~exist(folderName, 'dir')
    mkdir(folderName);
end

% Save the figure
saveas(gcf, fullfile(folderName, 'distNoExcitement.png'));

