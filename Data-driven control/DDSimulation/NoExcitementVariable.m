clear; close all; clc;
%% 1/ Consider the following linear model describing a chemical reactor and obtained with unitary sample time.
% Dimension of A : n x n
A_c = [0 0 1 0; 
       0 0 0 1; 
       0 -69.4 0 0; 
       0  150 0 0];

% Dimension of B : n x m
B_c = [0; 0; 273; -130];

% Parameters
n = size(A_c,2);          
m = size(B_c,2);

Ts = 0.01; % Example: 10ms sampling time -> 100H
% Discretize the system
sys_c = ss(A_c,B_c,[1 0 0 0],0);
sys_d = c2d(sys_c, Ts);
A = sys_d.A;
B = sys_d.B;

% Assigment of the set 
% Define the settling time (in seconds)
t_s = 1;
bessel_4var1 = (1 / t_s) * [-4.016 + 5.072i, -4.016 - 5.072i, -5.528 + 1.655i, -5.528 - 1.655i];
t_s = 0.6;
bessel_4var06 = (1 / t_s) * [-4.016 + 5.072i, -4.016 - 5.072i, -5.528 + 1.655i, -5.528 - 1.655i];
p_4var_bessel1 = exp(bessel_4var1 * Ts);
p_4var_bessel06 = exp(bessel_4var06 * Ts);

% Model-Based Pole-placement methods
% The place.m function requires the Control System Toolbox.
K_bessel1_theory = place(A, B, p_4var_bessel1);
K_bessel06_theory = place(A, B, p_4var_bessel06);
K_MB = K_bessel1_theory;

disp(mean(abs(abs(K_bessel06_theory - K_MB)./-K_MB)));
 
% Arrays to store eigenvalue differences
eig_diff1_values = [];
eig_diff2_values = [];

T_values = (2:50); % Generates values 1, 2, 4, 8, 16, 32, 64, 128, 256
rng(30);
T = 100;
% Historical data (u,x) is generated by simulating the open loop system
x = zeros(n, T); % Dimension of x : n x T
u = zeros(m, T); % Gaussian noise and Dimension of u : m x T
% Simulate the system for T time steps
for t = 1:T-1
    u(:,t) = - K_bessel06_theory * x(:,t);
    rdm_state_measurement = [randn(m,1)/1000; randn(m,1)/1000; randn(m,1)/1000; randn(m,1)/1000];
    x(:,t+1) = A * x(:,t) + B * u(:,t) + rdm_state_measurement; % Give same gain with Bessel or ITAE
end

% Loop over T values from 1 to 256 (doubling each iteration)
for T = T_values
    % Feedback gain after perturbation
    U_0 = u(:,1:T-1); % Dimension of U_0 : m x T-1
    X_0 = x(:,1:T-1); % Dimension of X_0 : n x T-1
    X_1 = x(:,2:T); % Dimension of X_1 : n x T-1

    M_rdm = ones(T-1,n);

    rdmPoles = p_4var_bessel1;

    for i = 1:n
        M_rdm(:,i) = fsolve(@(m_i) (X_1 - rdmPoles(i)*X_0)*m_i, M_rdm(:,i));
    end

    K_directDD = - U_0 * M_rdm * pinv(X_0 * M_rdm);
    eig1 = eig(A - B * K_directDD);
    %eig_diff1 = norm(eig1 - p_4var_itae);
    eig_diff1 = mean(abs(abs(K_directDD - K_MB)./abs(K_MB)));
    eig_diff1_values = [eig_diff1_values, eig_diff1];

    % Linear Regression for A and B
    if (T >5)
        BA = X_1 * pinv([X_0; U_0]);
        A_OL = BA(:, 1:4); % This assumes A is in the second column of the combined matrix
        B_OL = BA(:, 5); % This assumes B is in the first column of the combined matrix
        
        K_indirectDD = place(A_OL, B_OL, rdmPoles);
        eig2 = eig(A - B * K_indirectDD);
        %eig_diff2 = norm(eig2 - p_4var_itae);
        eig_diff2 = mean(abs(abs(K_indirectDD - K_MB)./-K_MB));
        eig_diff2_values = [eig_diff2_values, eig_diff2];

    % Compute the eigenvalues
    end
    
end

% Ensure 'DataForPlot' folder exists
folderName = 'DataForPlot';
if ~exist(folderName, 'dir')
    mkdir(folderName);
end

% Prepare the data for each file
T_values_100 = T_values / 100; % Convert T_values to seconds
T_values_s = T_values(T_values > 5) / 100; % Convert to seconds for eig_diff2_values

data1 = [T_values_100(:), eig_diff1_values(:)];
data2 = [T_values_s(:), eig_diff2_values(:)];

% Write to CSV files
csvwrite(fullfile(folderName, 'NoExcitementVariable1.csv'), data1);
csvwrite(fullfile(folderName, 'NoExcitementVariable2.csv'), data2);

% Alternatively, include headers using fprintf for each file
fileID1 = fopen(fullfile(folderName, 'NoExcitementVariable1.csv'), 'w');
fprintf(fileID1, 'T_values,eig_diff1_values\n');
fclose(fileID1);
dlmwrite(fullfile(folderName, 'NoExcitementVariable1.csv'), data1, '-append');

fileID2 = fopen(fullfile(folderName, 'NoExcitementVariable2.csv'), 'w');
fprintf(fileID2, 'T_values,eig_diff2_values\n');
fclose(fileID2);
dlmwrite(fullfile(folderName, 'NoExcitementVariable2.csv'), data2, '-append');


